#!/sbin/sh -x
# Magic GApps Installer
# (c) 2018, VR25 @ xda-developers
# License: GPL v3+

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true
$BOOTMODE || id | grep -q 'uid=0' || BOOTMODE=true

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

ui_print() {
  $BOOTMODE && echo -e "$1" || echo -e "ui_print $1\nui_print" >> /proc/self/fd/$OUTFD
}

# Not a function, but... meh!
if $BOOTMODE; then
	ui_print " "
	ui_print "(!) Boot mode install is not supported"
	ui_print "- Install from recovery mode"
	ui_print " "
	exit 1
fi

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  [ -z "$FILES" ] && FILES='/system/build.prop'
  sed -n "$REGEX" $FILES 2>/dev/null | head -n 1
}

is_mounted() { mountpoint -q "$1"; }

mount_check() {
	if is_mounted "$1"; then
		ui_print " "
		ui_print "(!) Couldn't bind-mount $1"
		ui_print " "
		exit 1
	fi
}

bind_mount() {
	mount -o bind "$1" "$2"
	if ! is_mounted "$2"; then
		ui_print " "
		ui_print "(!) Couldn't bind-mount $2"
		ui_print " "
		exit 1
	fi
}

mount_image() {
	ui_print "- Mounting $1 to $2"
	[ -d "$2" ] || mkdir -p "$2"
	if (! is_mounted $2); then
		LOOPDEVICE=
		for LOOP in 0 1 2 3 4 5 6 7; do
			if (! is_mounted $2); then
				LOOPDEVICE=/dev/block/loop$LOOP
				[ -f "$LOOPDEVICE" ] || mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
				losetup $LOOPDEVICE $1
				if [ "$?" -eq "0" ]; then
					mount -t ext4 -o loop $LOOPDEVICE $2
					is_mounted $2 || /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
					is_mounted $2 || /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
				fi
				is_mounted $2 && break
			fi
		done
	fi
	if ! is_mounted $2; then
	  ui_print " "
	  ui_print "(!) Couldn't mount $IMG"
	  ui_print " "
	  exit 1
	fi
}

set_perm() {
  chown $2:$3 "$1" || exit 1
  chmod $4 "$1" || exit 1
  [ -z "$5" ] && chcon 'u:object_r:system_file:s0' "$1" || chcon $5 "$1"
}

mktouch() {
  mkdir -p ${1%/*} 2>/dev/null
  [ -z "$2" ] && touch "$1" || echo "$2" > "$1"
  chmod 644 $1
}

image_size_check() {
  e2fsck -yf $1 >&2
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

shrink_img() {
	image_size_check $IMG
	NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
	if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
	  ui_print "- Shrinking $IMG to ${NEWDATASIZE}M"
	  resize2fs $IMG ${NEWDATASIZE}M >&2
	fi
}

unmount_all() {
	ui_print "- Unmounting image & partitions"
	umount $MOUNTPATH
	losetup -d $LOOPDEVICE
	rmdir $MOUNTPATH
	umount -l /system_root
	umount -l /system
	umount -l /vendor
	umount -l /persist 
} 2>/dev/null


exxit() {
	if [ "$1" = "0" ]; then
		if [ -f /data/u ]; then
			ui_print "- Uninstalling Magic GApps"
			rm -rf $MODPATH
			rm -f /data/u
			ui_print "- Done"
		else
			ui_print "  "
			ui_print "(i) No update found"
			ui_print "- Run \"touch /data/r\" to reinstall"
			ui_print "- Or \"touch /data/u\" to uninstall"
			ui_print " "
		fi
	else
		ui_print "  "
		ui_print "(!) No compatible package found"
		ui_print "- Make sure the target archive exists and isn't corrupted"
		ui_print "  "
	fi
	unmount_all
	shrink_img
	ui_print " "
	[ "$1" = "0" ] && exit 0 || exit 1
}


wipe_MODPATH() {
	mv -f $MODPATH/.persist $INSTALLER
	rm -rf $MODPATH
	mkdir -p $MODPATH
	mv $INSTALLER/.persist $MODPATH
} 2>/dev/null


disable_apks() {
  for file in $(find $MODPATH -type f -name '.replace'); do
    rm $file
  done
  for d in $sysApp $sysPrivApp $vendorApp; do
    if [ -d "${MODPATH}$d" ]; then
	  [ -z "$(ls "${MODPATH}$d" 2>/dev/null)" ] \
	    && rm -rf "${MODPATH}$d"
	else
	  mktouch "${MODPATH}$d/.replace"
	fi
  done
}


resolve_link() {
  RESOLVED="$1"
  while RESOLVE=`readlink $RESOLVED`; do
    RESOLVED=$RESOLVE
  done
  echo $RESOLVED
}

find_boot_image() {
  BOOTIMAGE=
  if [ ! -z $SLOT ]; then
    BOOTIMAGE=`find /dev/block -iname boot$SLOT | head -n 1` 2>/dev/null
  fi
  if [ -z "$BOOTIMAGE" ]; then
    # The slot info is incorrect...
    SLOT=
    for BLOCK in boot_a kern-a android_boot kernel boot lnx bootimg; do
      BOOTIMAGE=`find /dev/block -iname $BLOCK | head -n 1` 2>/dev/null
      [ ! -z $BOOTIMAGE ] && break
    done
  fi
  # Recovery fallback
  if [ -z "$BOOTIMAGE" ]; then
    for FSTAB in /etc/*fstab*; do
      BOOTIMAGE=`grep -v '#' $FSTAB | grep -E '/boot[^a-zA-Z]' | grep -oE '/dev/[a-zA-Z0-9_./-]*'`
      [ ! -z $BOOTIMAGE ] && break
    done
  fi
  [ ! -z "$BOOTIMAGE" ] && BOOTIMAGE=`resolve_link $BOOTIMAGE`
}

find_dtbo_image() {
  DTBOIMAGE=`find /dev/block -iname dtbo$SLOT | head -n 1` 2>/dev/null
  [ ! -z $DTBOIMAGE ] && DTBOIMAGE=`resolve_link $DTBOIMAGE`
}


mount_partitions() {
  [ -n "$1" ] && no_notice=true || no_notice=false
  ui_print_() { $no_notice || ui_print "$1"; }
  { mount /data
  mount /cache; } 2>/dev/null

  # Check A/B slot
  SLOT=`getprop ro.boot.slot_suffix`
  if [ -z $SLOT ]; then
    SLOT=_`getprop ro.boot.slot`
    [ $SLOT = "_" ] && SLOT=
  fi

  # Check the boot image to make sure the slot actually makes sense
  find_boot_image
  find_dtbo_image
  [ -z $SLOT ] || ui_print_ "- A/B partition detected, current slot: $SLOT"

  ui_print_ "- Mounting /system, /vendor"
  is_mounted /system || [ -f /system/build.prop ] || mount -o ro /system 2>/dev/null
  if ! is_mounted /system && ! [ -f /system/build.prop ]; then
    SYSTEMBLOCK=`find /dev/block -iname system$SLOT | head -n 1`
    mount -t ext4 -o ro $SYSTEMBLOCK /system
  fi
  is_mounted /system || [ -f /system/build.prop ] || abort "(!) Couldn't mount /system"
  cat /proc/mounts | grep -E '/dev/root|/system_root' >/dev/null && SKIP_INITRAMFS=true || SKIP_INITRAMFS=false
  if [ -f /system/init.rc ]; then
    SKIP_INITRAMFS=true
    mkdir /system_root 2>/dev/null
    mount --move /system /system_root
    mount -o bind /system_root/system /system
  fi
  $SKIP_INITRAMFS && ui_print_ "- Device skip_initramfs detected"
  if [ -L /system/vendor ]; then
    # Seperate /vendor partition
    is_mounted /vendor || mount -o ro /vendor 2>/dev/null
    if ! is_mounted /vendor; then
      VENDORBLOCK=`find /dev/block -iname vendor$SLOT | head -n 1`
      mount -t ext4 -o ro $VENDORBLOCK /vendor
    fi
    is_mounted /vendor || abort "(!) Couldn't mount /vendor"
  fi
}


mod_info() {
  grep_prop "$1" $INSTALLER/module.prop
}

print_modname() {
  ui_print " "
  ui_print "$(mod_info name) ($(mod_info id)) $(mod_info version)"
  ui_print "$(mod_info author)"
  ui_print "Powered by Magisk (@topjohnwu)"
  ui_print " "
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

# Set SELinux mode to "permissive"
setenforce 0

OUTFD=$2
OOUTFD=$2
ZIP="$3"

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
	readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
	if [ "$?" -eq "0" ]; then
	  ps | grep " 3 $FD " | grep -v grep >/dev/null
	  if [ "$?" -eq "0" ]; then
		OUTFD=$FD
		break
	  fi
	fi
  done
fi

# This path should work in any cases
TMPDIR=/dev/tmp

INSTALLER=$TMPDIR/install
MOUNTPATH=$TMPDIR/magisk_img
$BOOTMODE && IMGNAME=magisk_merge.img || IMGNAME=magisk.img
[ -d /data/adb/magisk ] && IMG=/data/adb/$IMGNAME || IMG=/data/$IMGNAME

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER 2>/dev/null

unzip -o "$ZIP" 'common/*' module.prop -d $INSTALLER >&2

MODID="`grep_prop id $INSTALLER/module.prop`"
MODPATH=$MOUNTPATH/$MODID

##########################################################################################
# Main
##########################################################################################

# Print mod name
print_modname

mount_partitions

API=`grep_prop ro.build.version.sdk`
ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`

ARCH=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x86_64; IS64BIT=true; fi;

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

if [ ! -f /data/u ]; then
	if [ -f "$IMG" ]; then
	  ui_print "- $IMG detected"
	  image_size_check $IMG
	  if [[ $curFreeM -lt 2048 ]]; then
      SIZE=$(($curSizeM - $curFreeM + 2048))
      ui_print " "
      ui_print "- Resizing $IMG to ${SIZE}M (buffer)"
      resize2fs $IMG ${SIZE}M >&2
	  fi
	else
	  SIZE=2048
	  ui_print " "
	  ui_print "- Creating $IMG with size ${SIZE}M (buffer)"
	  make_ext4fs -l ${SIZE}M $IMG >&2
	fi
fi

ui_print " "
mount_image $IMG $MOUNTPATH
ui_print " "

# Environment
CurVerInfo=$MODPATH/system/etc/g.prop
CurOpenGA_VER=0
Reinstall=false

# Find latest OpenGAPackage
ui_print "- Searching for open_gapps-* zip"
OIFS=$IFS
IFS=$'\n\t'
for File in $(find /external_sd /sdcard -type f -iname open_gapps-*.zip 2>/dev/null); do
	if [ "$(unzip -pqqo "$File" g.prop 2>/dev/null | sed -n '/ro.addon.arch/s/.*=//p')" = "$ARCH" ] \
		&& [ "$(unzip -pqqo "$File" g.prop 2>/dev/null | sed -n '/ro.addon.sdk/s/.*=//p')" = "$API" ]; then
			FoundOpenGA_VER="$(unzip -pqqo "$File" g.prop 2>/dev/null | sed -n '/ro.addon.open_version/s/.*=//p')"
			if [ "$FoundOpenGA_VER" -ge "$CurOpenGA_VER" ]; then
				CurOpenGA_VER=$FoundOpenGA_VER
				LatestZip="$File"
			fi
	fi
done
IFS=$OIFS

[ -z "$LatestZip" ] && exxit 1
[ -f "$CurVerInfo" ] && OpenGA_VER="`grep_prop 'ro.addon.open_version' $CurVerInfo`" || OpenGA_VER=0

if [ "$CurOpenGA_VER" -gt "$OpenGA_VER" ]; then
	GAppsZip="$LatestZip"
else
	if [ -f /data/r ]; then
		Reinstall=true
		GAppsZip="$LatestZip"
		rm /data/r
	else
		exxit 0
	fi
fi
wipe_MODPATH

OpenGAPackage="`unzip -pqo "$GAppsZip" g.prop | sed -n '/ro.addon.open_type/s/.*=//p'`-$CurOpenGA_VER"
ui_print " "
ui_print "- Latest package found: $GAppsZip"
ui_print " "

# System packages
sysApp="$(ls -d /system/app/*)"
sysPrivApp="$(ls -d /system/priv-app/*)"
vendorApp="$(ls -d /vendor/bundled-app/* 2>/dev/null)"

# Bind mount NewPersistPath NewSystemPath & NewVendorPath
ui_print "- Bind-mounting pseudo /persist, /system & /vendor paths"
ui_print " "
cp -af /system/build.prop $INSTALLER/build.prop
umount -l /system_root 2>/dev/null
umount -l /system 2>/dev/null
mount_check /system
NewPersistPath=$MODPATH/.persist
NewSystemPath=$MODPATH/system
NewVendorPath=$NewSystemPath/vendor
mkdir $NewPersistPath /persist 2>/dev/null
mkdir $NewSystemPath
umount -l /persist 2>/dev/null
mount_check /persist
bind_mount $NewPersistPath /persist
bind_mount $NewSystemPath /system
if [ -d /vendor ]; then
	umount -l /vendor 2>/dev/null
	mount_check /vendor
	mkdir $NewVendorPath
	bind_mount $NewVendorPath /vendor
fi

# Create pseudo-system packages
for d in $sysApp $sysPrivApp $vendorApp; do
  mktouch ${MODPATH}$d/.replace
done

# Extract OpenGApps install scripts
ui_print "- Extracting $(basename $GAppsZip) install scripts"
ui_print " "
GAppsTmpDir="$INSTALLER/OpenGApps"
GAppsInstaller=$GAppsTmpDir/META-INF/com/google/android/update-binary
mkdir "$GAppsTmpDir" 2>/dev/null
unzip -o "$GAppsZip" "META-INF/*" -d "$GAppsTmpDir" >&2
unzip -o "$GAppsZip" installer.sh -d /tmp >&2


# Patch GApps install scripts
ui_print "- Patching installer.sh & update-binary"

sed -i '/SYSTEM=\/system\/system/s/m\/system/m/; \
	/abpartition=true/s/true/false/; \
	/ui_print.*ounting/d; \
	/ui_print.*lation.*omplete/d; \
	/ui_print.*sys.*space.*tions/d; \
	/ui_print.*emoving/d' /tmp/installer.sh
	
if grep -q slot_suffix /proc/cmdline; then
	sed -i '/ln \-/s/\/system\/\$libfolder/\/system\/system\/\$libfolder/g' /tmp/installer.sh
	sed -i '/ln \-/s/\$SYSTEM\/\$libfolder/\/system\/system\/\$libfolder/g' /tmp/installer.sh
fi

sed -i '/vrmode_compat=false/a faceunlock_compat=true' /tmp/installer.sh
sed -i '/vrmode_compat=false/s/false/true/' /tmp/installer.sh

sed -i 's/unzip \-o/unzip \-n/' $GAppsInstaller


# (Re-)Install OpenGApps
ui_print " "
$Reinstall && ui_print "- Re-installing $(basename $GAppsZip)" \
	|| ui_print "- Installing $(basename $GAppsZip)"
cp -af $INSTALLER/build.prop $NewSystemPath
set_perm $GAppsInstaller 0 0 755
set_perm /tmp/installer.sh 0 0 755
sh $GAppsInstaller dummy "$OOUTFD" "$GAppsZip"

# Disable conflicting and/or unwanted system APKs
{ umount -l /system
umount -l /vendor
umount -l /persist; } 2>/dev/null
mount_partitions no_notice
ui_print "- Pseudo-removing conflicting/unwanted system apps"
disable_apks

# Update module.prop to reflect OpenGApps version
sed -i "2s/$/ ($OpenGAPackage)/" $INSTALLER/module.prop

# Cleanup
rm $MODPATH/system/build.prop
rm -rf $MODPATH/system/addon.d
[ "`ls -A $NewPersistPath`" ] || rm -rf $NewPersistPath
[ "`ls -A $NewVendorPath`" ] || rm -rf $NewVendorPath

# Auto Mount
mktouch $MODPATH/auto_mount

# Module info
cp $INSTALLER/module.prop $MODPATH/

unmount_all
shrink_img

ui_print "- Installation complete"
ui_print " "
exit 0
